  # - name: pull quay image
  #   docker_image:
  #     name: quay.io/coreos/quay
  #     tag: v2.8.0
  #   become_user: vagrant
  # - name: pull redis image
  #   docker_image:
  #     name: quay.io/quay/redis
  #     tag: latest
  # - name: pull mysql image
  #   docker_image:
  #     name: mysql
  #     tag: 5.7

  # - name: redis container
  #   docker:
  #     name: redis
  #     image: quay.io/quay/redis
  #     state: started
  #     ports:
  #     - "6379:6379"

  # - name: mysql container
  #   docker:
  #     name: mysql
  #     image: mysql:5.7
  #     state: started
  #     ports:
  #     - "3306:3306"
  #     env:
  #       MYSQL_USER: coreosuser
  #       MYSQL_DATABASE: enterpriseregistrydb
  #       MYSQL_CONTAINER_NAME: mysql
  #       MYSQL_ROOT_PASSWORD: 10hWfe6cns3lNEOIp5Q0hiEtABBDYaMn
  #       MYSQL_PASSWORD: 10hWfe6cns3lNEOIp5Q0hiEtABBDYaMn

  # - name: quay container
  #   docker:
  #     name: quay
  #     image: quay.io/coreos/quay:v2.8.0
  #     state: started
  #     restart_policy: always
  #     ports:
  #     - "80:80"
  #     - "443:443"
  #     volumes:
  #     - /home/vagrant/quay-config:/conf/stack
  #     - /home/vagrant/quay-storage:/datastorage


- hosts: all
  become: true
  tasks:
  # docker
  - yum:
      name: docker
      state: latest
  - group:
      name: docker
      state: present
  - user:
      name: vagrant
      groups: docker
      append: yes
      generate_ssh_key: yes
      ssh_key_bits: 2048
      ssh_key_file: .ssh/id_rsa
  - lineinfile:
      dest: /etc/sysconfig/docker
      regexp: "OPTIONS='--selinux-enabled --log-driver=journald'"
      line: "OPTIONS='--selinux-enabled -G docker --log-driver=journald'"
  - file:
      path: /home/vagrant/.docker
      state: directory
    become_user: vagrant
  - template:
      src: /home/thomasmckay/code/tmp/quay-config.json
      dest: /home/vagrant/.docker/config.json
  - service:
      name: docker
      state: restarted

  - name: yum install epel-release
    yum:
      name: epel-release
      state: latest
  - name: yum install python-pip
    yum:
      name: python-pip
      state: latest
  - name: pip install docker-py
    command: pip install docker-py

  - name: yum install postgresql
    yum:
      name: postgresql
      state: latest
  - name: yum install postgresql-server
    yum:
      name: postgresql-server
      state: latest
  - name: yum install postgresql-contrib
    yum:
      name: postgresql-contrib
      state: latest
  - name: yum install gpgme
    yum:
      name: gpgme
      state: latest
  - name: yum install python-virtualenv
    yum:
      name: python-virtualenv
      state: latest

  - name: setup repos to yum install yarn
    get_url:
      url: https://dl.yarnpkg.com/rpm/yarn.repo
      dest: /etc/yum.repos.d/yarn.repo
  - name: yum install yarn
    yum:
      name: yarn
      state: latest
  - name: setup repos to install node
    get_url:
      url: https://rpm.nodesource.com/setup_8.x
      dest: /tmp/node-setup
  - name: install node
    command: bash /tmp/node-setup

  - name: yum install python-setuptools
    yum:
      name: python-setuptools
      state: latest

  - name: yum install git
    yum:
      name: git
      state: latest
  - name: yum install gcc
    yum:
      name: gcc
      state: latest
  - name: yum install python-devel
    yum:
      name: python-devel
      state: latest
  - name: yum install openldap-devel
    yum:
      name: openldap-devel
      state: latest
  - name: yum install gcc-c++
    yum:
      name: gcc-c++
      state: latest
  - name: yum install gpgme-devel
    yum:
      name: gpgme-devel
      state: latest

  - file:
      path: /home/vagrant/quay-storage
      state: directory
    become_user: vagrant
  - file:
      path: /home/vagrant/quay-config
      state: directory
    become_user: vagrant

  - name: create virtualenv
    become_user: vagrant
    become: yes
    command: virtualenv /home/vagrant/venv
  - name: install pip latest
    become_user: vagrant
    become: yes
    pip:
      name: pip
      virtualenv: /home/vagrant/venv
      extra_args: --upgrade

  - name: pip install requirements.txt
    become_user: vagrant
    become: yes
    pip:
      requirements: /home/vagrant/code/quay/requirements.txt
      virtualenv: /home/vagrant/venv
  - name: pip install requirements-dev.txt
    become_user: vagrant
    become: yes
    pip:
      requirements: /home/vagrant/code/quay/requirements-dev.txt
      virtualenv: /home/vagrant/venv
  - name: pip install requirements-tests.txt
    become_user: vagrant
    become: yes
    pip:
      requirements: /home/vagrant/code/quay/requirements-tests.txt
      virtualenv: /home/vagrant/venv

  - name: install pip pydevd
    become_user: vagrant
    become: yes
    pip:
      name: pydevd
      virtualenv: /home/vagrant/venv
      extra_args: --upgrade

  - name: yum install go
    yum:
      name: go
      state: latest
  - name: set GOPATH bashrc
    blockinfile:
      path: /home/vagrant/.bashrc
      block: |
        export GOPATH=/home/vagrant/go
        export PATH=$PATH:/home/vagrant/go/bin
  - name: go get goreman
    become_user: vagrant
    become: yes
    command: go get github.com/mattn/goreman
    environment:
      GOPATH: /home/vagrant/go

  # 'yarn test' depends on chrome
  # wget https://chromedriver.storage.googleapis.com/2.40/chromedriver_linux64.zip
  # sudo yum install -y wget
  # wget https://chromedriver.storage.googleapis.com/2.40/chromedriver_linux64.zip
  # sudo yum install -y unzip
  # unzip chromedriver_linux64.zip 
  # wget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm
  # sudo yum install google-chrome-stable_current_x86_64.rpm
  - name: yum install google-chrome
    yum:
      name: https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm

  # https://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-on-centos-7
  # sudo postgresql-setup initdb
  # sudo vi /var/lib/pgsql/data/pg_hba.conf
  # host    all             all             127.0.0.1/32            ident
  # host    all             all             ::1/128                 ident
  # ...to...
  # host    all             all             127.0.0.1/32            md5
  # host    all             all             ::1/128                 md5
  # sudo systemctl start postgresql
  # sudo systemctl enable postgresql
  
  # setup postgresql db
  # conf/stack/config.yaml
  #   DB_URI: postgresql://postgres:redhat@quay.example.com:5432/quay?sslmode=disable
  # sudo -i -u postgres
  # createdb quay
  # ???? createuser --login --pwprompt --createdb --superuser --username quay
  # psql -d quay

  - lineinfile:
      dest: /var/lib/pgsql/data/postgresql.conf
      regexp: "#listen_addresses = 'localhost'"
      line: "listen_addresses = '0.0.0.0'"

  # subscription-manager
  - yum:
      name: subscription-manager
      state: latest
  - file:
      path: /etc/pki/product
      state: directory

  # TLS
  - name: Run nginx_conf_create.sh
    become_user: vagrant
    become: yes
    command: conf/init/nginx_conf_create.sh
    environment:
      QUAYDIR: /home/vagrant/code/quay
      QUAYCONF: /home/vagrant/code/quay/conf
    args:
      chdir: /home/vagrant/code/quay

  - name: Copy all conf files
    copy:
      src: "/home/thomasmckay/code/quay/conf/nginx/{{ item }}"
      dest: "/etc/nginx/{{ item }}"
      mode: u+rw,g+rw,o+rw
    with_items:
      - nginx.conf
      - root-base.conf
      - http-base.conf
      - hosted-http-base.conf
      - rate-limiting.conf
      - server-base.conf

  - name: nginx.conf - remove VTS
    replace:
      dest: /etc/nginx/nginx.conf
      regexp: "vhost_traffic_status_zone"
      replace: "#vhost_traffic_status_zone"
  - name: nginx.conf - remove VTS
    replace:
      dest: /etc/nginx/nginx.conf
      regexp: "include vhost-traffic-status.conf"
      replace: "#include vhost-traffic-status.conf"
  - name: nginx.conf - remove VTS
    replace:
      dest: /etc/nginx/root-base.conf
      regexp: "load_module modules/ngx_http_vhost_traffic_status_module.so"
      replace: "#load_module modules/ngx_http_vhost_traffic_status_module.so"

  - name: nginx.conf - set ssl.cert and ssl.key
    replace:
      dest: /etc/nginx/nginx.conf
      regexp: "../stack/ssl."
      replace: "ssl."

  - name: nginx.conf - remove ssl.old.*
    replace:
      dest: /etc/nginx/nginx.conf
      regexp: "ssl.old."
      replace: "ssl."

  - name: nginx.conf - fix /dev/stdout
    replace:
      dest: /etc/nginx/nginx.conf
      regexp: "/dev/stdout"
      replace: "syslog"
  - replace:
      dest: /etc/nginx/http-base.conf
      regexp: "/dev/stdout"
      replace: "syslog"
  - replace:
      dest: /etc/nginx/root-base.conf
      regexp: "/dev/stdout"
      replace: "syslog"

  - name: Run in daemon mode
    replace:
      dest: /etc/nginx/root-base.conf
      regexp: "daemon off"
      replace: "daemon on"

  - name: nginx.pid in /run instead of /tmp
    replace:
      dest: /etc/nginx/root-base.conf
      regexp: "pid /tmp/nginx.pid"
      replace: "pid /run/nginx.pid"

  - name: copy ssl key and cert
    copy:
      src: quay-ssl.key
      dest: /etc/nginx/ssl.key
      mode: u+rw,g+rw,o+rw
  - copy:
      src: quay-ssl.cert
      dest: /etc/nginx/ssl.cert
      mode: u+rw,g+rw,o+rw

  - name: Allow nginx to read /tmp
    replace:
      dest: /lib/systemd/system/nginx.service
      regexp: PrivateTmp=true
      replace: PrivateTmp=false
  - lineinfile:
      dest: /lib/systemd/system/nginx.service
      insertafter: KillMode=process
      line: PrivateTmp=false

  - name: Point at single gunicorn
    replace:
      dest: /etc/nginx/http-base.conf
      regexp: "server unix:/tmp/gunicorn_web.sock fail_timeout=0;"
      replace: "server unix:/run/gunicorn_local.sock fail_timeout=0;"
  - replace:
      dest: /etc/nginx/http-base.conf
      regexp: "server unix:/tmp/gunicorn_verbs.sock fail_timeout=0;"
      replace: "server unix:/run/gunicorn_local.sock fail_timeout=0;"
  - replace:
      dest: /etc/nginx/http-base.conf
      regexp: "server unix:/tmp/gunicorn_registry.sock fail_timeout=0;"
      replace: "server unix:/run/gunicorn_local.sock fail_timeout=0;"

  - name: Add user group "nogroup"
    group:
      name: nogroup
      state: present

  - name: Restart nginx service
    systemd:
      name: nginx
      state: restarted
      daemon_reload: yes

